[GoogleMaps] : 사용자가 보낸 마지막 위치 정보를 지도에 표시하는 앱
[GoogleMapsClustering]

Google Map API 세팅 순서
1. 프로젝트 설정 화면에서 'Google Maps Activity' 로 프로젝트 생성
2. [Tools]-[SDK Manager]-[Android SDK]-[SDK Tools]-> Google Play service 'Installed' //설치되어 있지 않다면 onMapReady() 가 호출되지 않음
3. API 발급
[app]-[res]-[values]-google_maps_api.xml 상단 링크에서 API 발급 받은 후 설정 변경 후 사용
-API 를 생성한 후 Credentials - Actions - Edit API key(펜 아이콘) - Application restrictions - None 설정 후 API 복사
4. FusedLocationProviderClient API : 사용자의 현재위치를 검색하는 API. GPS, 와아파이, 통신사 네트워크 위치를 결합해서 위치 검색
-앱 수준 build.gradle 에 dependency 추가
-AndroidManifest 에 위치 접근 권한 추가

** The minCompileSdk(31) specified in a dependency's ... 메세지가 뜨며 정상 작동되지 않을 때
-> 앱 수준 build.gralde - defaultConfig - resolutionStrategy{ force 'androidx.core:core-ktx:16.0' } 추가
_____________________________________________________________________________________________________
[NetworkHttpUrlConnection] : HTTP 프로토콜을 사용해 입력받은 URL 로 서버연결 후 데이터를 읽어오는 앱
[NetworkRetrofit] : 레트로핏 통신 라이브러리로 HTTP 프로토콜로 연결해 깃허브 사용자 정보를 JSON 데이터 형식으로 읽어와 UI에 띄워주는 앱
[Retrofit_Login]

HttpURLConnection 클래스, HttpsURLConnection 클래스
-앱 수준의 build.gradle 에 dependency 추가, AndroidManifest 에 인터넷 퍼미션 추가
-HTTP 프로토콜로 데이터 통신
-val urlConnection = url.openConnection() as HttpURLConnection
프로토콜 : 전송 방식을 표준화하여 어떤 컴퓨터와도 동일한 방식으로 데이터를 주고받을 수 있게 만들어진 통신 규약
패킷 : 데이터가 전송되는 실제 단위
HTTP : 서버와 브라우저의 데이터 통신이 가능하도록 설계된 표준 규약
쿼리 스트링 : 요청 주소의 뒤에 옵션 데이터를 붙여서 전달하는 방식. 요청 주소와 옵션은 ? 로 구분
JSON : 데이터 교환에 사용하는 표준 데이터 형식으로 이해하기 쉬우면서 데이터 용량이 적다는 장점이 있음
-> 인터넷은 전송할 데이터를 HTTP 라는 프로토콜로 만들어진 패킷(바구니)에 담은 후 전송 프로토콜인 TCP/IP를 사용하여 수신 측에 전달하는 구조

Glide 라이브러리
-https://github.com/bumptech/glide
-URL 주소만 알려주면 해당 이미지가 있는 서버에 접속하여 이미지를 다운로드해서 이미지뷰에 보내는 도구
-AndroidManifest - 인터넷 퍼미션 추가, 앱 수준 build.gradle - dependency / plugins(id 'kotlin-kapt') 추가
-dependencies 에 kapt 설정 추가
-Glide 라이브러리를 사용하기 위해서 MyGlideApp 에 AppGlideModule 를 상속받고 @GlideModule 추가

레트로핏 통신 라이브러리
-https://square.github.io/retrofit
-HttpURLConnection 클래스보다 더 간단하게 HTTP 로 데이터를 통신하는 라이브러리
-레트로핏 통신 라이브러리는 레트로핏 인터페이스를 해석해 HTTP 통신 처리

GSON 라이브러리
-레트로핏 통신으로 가져온 JSON 데이터를 코틀린 데이터 클래스로 변환해 주는 컨터버

JSON TO Kotlin Class 플러그인
-JSON 형식으로 된 텍스트 데이터를 코틀린 클래스로 간단하게 변환해주는 플러그인
-[File]-[Settings]->[Plugins] 선택 후 JASON To Kotlin Class 플러그인 검색 후 설치
-기본 패키지 우클릭 -> [New]-[Kotlin data class File from JSON] -> 샘플 JSON 형식 데이터를 복사 붙혀넣고 'Repository' 를 생성 -> 데이터 클래스가 생성됨
(ex. Repository, RepositoryItem, Owner, License)

MyGlideAPP
-AppGlideModule 를 상속
-@GlideModule 추가

RetrofitInterface
-레트로핏 통신 라이브러리가 RetrofitInterface 를 해석해 HTTP 통신 처리
-호출 방식(ex. @GET), 주소(도메인은 제외하고 작성 ex. users/Kotlin/repos), 데이터(ex. fun users(): Call<Repository>) 등 데이터가 담겨있음
_____________________________________________________________________________________________________
[SeoulPublicLibraries] : 구글 지도에 서울 도서관 공공 API 에서 가져온 데이터를 사용해 도서관 위치를 표시해주는 앱
[GoogleSheetAPI]
-도서관 정보 API 가 HTTPS 가 아닌 HTTP 를 사용하기 때문에 AndroidManifest <application ... android:usesCleartextTraffic="true"> 추가
-공공 데이터 API 출처 : http://data.seoul.go.kr/dataList/OA-15480/S/1/datasetView.do
-OpenAPI 구조 : http://openapi.seoul.go.kr:8088/(인증키)/(문서형식)/SeoulPublicLibraryInfo/(페이지)/(요청개수)
-[data] 패키지 우클릭 - [New] - [Kotlin data class File from JSON] - Class Name 'Library' 로 입력하고 공공 데이터(인터넷 주소 + 인증키 + 데이터형식 등)를 갖고 있는 URL 주소를 붙혀 넣음

-앱 수준 build.gradle 에 레트로핏 통신 라이브러리, gson 라이브러리 dependecy 추가
-AndroidManifest 에 인터넷 퍼미션과 위치 정보 퍼미션 추가

API(Application Programming Interface)
-응용 프로그램(ex. 앱)에서 운영체제나 다른 프로그래밍 언어 등에서 제공하는 기능을 제어 할 수있는 인터페이스
-프로그램 간의 상호작용을 도와주는 역할. API 를 통해 데이터를 주고 받는다 ex)startActivity( ) 도 API 의 종류
-데이터 또는 서비스를 공개해 일반 개발자들이 사용할 수 있도록 제공하는 인터페이스. 인터넷 주소 형태로 제공됨
-API 를 통해 명령어를 전달하거나 데이터를 주고받을 수 있는데, 요청 방식(ex. GET, POST)과 데이터 형식(ex. JSON)은 대부분 표준으로 제공됨

OpenApi 클래스
-Open API 기본 정보(도메인, Api key 등) 담아두는 클래스
-companion object 블럭 안에 변수를 담아둠으로써 OpenApi.DOMAIN 처럼 변수를 쉽게 호출할 수 있음

loadLibraries()
-레트로핏 통신 라이브러리로 JSON 데이터를 불러옴

showLibraries()
-loadLibraries() 에서 서버로 부터 받은 JSON 데이터를 전달 받아 마커를 표시





